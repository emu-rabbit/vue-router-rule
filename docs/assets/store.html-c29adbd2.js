import{_ as n,p as s,q as a,a1 as t}from"./framework-5866ffd3.js";const p={},o=t(`<h1 id="store" tabindex="-1"><a class="header-anchor" href="#store" aria-hidden="true">#</a> Store</h1><p>Store is a feature that revolves around <code>RouterRuleBuilder#save</code> and <code>RouterRuleBuilder#load</code>, used to cache the results of conditionals.<br> Sometimes, within a guard, we still need nested if statements, such as the following code.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;/402&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>permissionAllow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;/402&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>And obviously, our <code>defineRule</code> takes an array as input, meaning each Rule is independent and has no dependency or nested relationship.<br> But writing it like below would be a frustrating experience.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token function">defineRule</span><span class="token punctuation">(</span>
    router<span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;/402&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>token<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> permissionAllow<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>token<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>permissionAllow<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&#39;/402&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>user<span class="token punctuation">.</span>token<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">)</span>
</code></pre></div><p><code>RouterRuleBuilder#save</code> and <code>RouterRuleBuilder#load</code> are used for caching the result of complex conditions in if statements or nested conditions.</p><p>In the example you mentioned, instead of repeating the same condition multiple times, you can save the result of the condition using RouterRuleBuilder#save, and then load it in the next condition using RouterRuleBuilder#load. This can simplify the code and reduce the chances of typos or errors.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token function">defineRule</span><span class="token punctuation">(</span>
    router<span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;/402&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">&#39;userHasToken&#39;</span><span class="token punctuation">)</span> <span class="token comment">// Here we save</span>
            <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> permissionAllow<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;userHasToken&#39;</span><span class="token punctuation">)</span> <span class="token comment">// Here we load</span>
            <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>permissionAllow<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&#39;/402&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>user<span class="token punctuation">.</span>token<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">)</span>
</code></pre></div><p>You might think it doesn&#39;t make much of a difference, but using <code>RouterRuleBuilder#save</code> and <code>RouterRuleBuilder#load</code> can achieve the DRY principle and the result will be cached, so the <code>() =&gt; user.token</code> passed function will not be executed the second time. If there are more than one linked conditions, none of the conditions will be executed.<br> This also includes using work assignments like <code>#do</code> before <code>#save</code>.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>In Vue Router Rule, we try to avoid any nesting as much as possible and keep everything flat.<br> This can help us to better understand what&#39;s happening in the guards during development and debugging.</p></div>`,10),e=[o];function c(u,i){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","store.html.vue"]]);export{k as default};
