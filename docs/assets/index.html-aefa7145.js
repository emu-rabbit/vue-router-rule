import{_ as e,M as o,p as c,q as u,R as s,t as n,N as a,V as l,a1 as i}from"./framework-5866ffd3.js";const k="/vue-router-rule/images/console.png",r={},d={class:"custom-container warning"},h=s("p",{class:"custom-container-title"},"WARNING",-1),g=s("br",null,null,-1),f=s("br",null,null,-1),m={href:"https://github.com/emu-rabbit/vue-router-rule/issues",target:"_blank",rel:"noopener noreferrer"},w=s("h1",{id:"introduction",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),n(" Introduction")],-1),b={href:"https://router.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},y=s("br",null,null,-1),_={href:"https://router.vuejs.org/guide/advanced/navigation-guards.html#global-before-guards",target:"_blank",rel:"noopener noreferrer"},v=s("br",null,null,-1),x=s("h1",{id:"it-changed-what",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#it-changed-what","aria-hidden":"true"},"#"),n(" It changed what?")],-1),R={href:"https://github.com/youlaitech/vue3-element-admin/blob/master/src/permission.ts",target:"_blank",rel:"noopener noreferrer"},T=i(`<div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> allowList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/auth-redirect&#39;</span><span class="token punctuation">]</span> <span class="token comment">// no redirect allowList</span>

router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> hasToken <span class="token operator">=</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// determine whether the user has logged in</span>
    <span class="token keyword">const</span> hasRoles <span class="token operator">=</span> userStore<span class="token punctuation">.</span>roles <span class="token operator">&amp;&amp;</span> userStore<span class="token punctuation">.</span>roles<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token comment">// determine whether the user has obtained his permission roles through getInfo</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>hasRoles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">// get user info</span>
                    <span class="token keyword">await</span> userStore<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// remove token and go to login page to re-login</span>
                    <span class="token keyword">await</span> userStore<span class="token punctuation">.</span><span class="token function">resetToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>allowList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// in the free login allowList, go directly</span>
            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// other pages that do not have permission to access are redirected to the login page.</span>
            <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Yeah, lot of nested <code>if</code> here.<br> It&#39;s hard to read when the application grows.<br> Comments are scattered everywhere in nested blocks, making it difficult to trace.<br> So, if something goes wrong, you have to add <code>console.log</code> everywhere before you can debug it.</p><p>With the use of Vue Router Rule, it now looks like this.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>
    hasToken<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>
    <span class="token function-variable function">hasRoles</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> Builder <span class="token operator">=</span> RouterRuleBuilder<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">create</span><span class="token generic class-name"><span class="token operator">&lt;</span>Context<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">defineRule</span><span class="token punctuation">(</span>
    router<span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Initialize context&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">do</span><span class="token punctuation">(</span>initializeContext<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">continue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;User with token will redirect to root from login page&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">withContext</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>hasToken<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">&#39;hasToken&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Accept user when role already cached&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;hasToken&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">withContext</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token function">hasRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Cache user role&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;hasToken&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">do</span><span class="token punctuation">(</span>cacheRole<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">continue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Accept user on cache success&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;hasToken&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">withContext</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token function">hasRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Logout on cache failed&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;hasToken&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">do</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> userStore<span class="token punctuation">.</span><span class="token function">resetToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Accept user without token but want to allowList&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">withContext</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> <span class="token operator">!</span>c<span class="token punctuation">.</span>hasToken<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>to <span class="token operator">=&gt;</span> allowList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Redirect user without token to login&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">initializeContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span> context <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">.</span>hasToken <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;accessToken&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    context<span class="token punctuation">.</span><span class="token function-variable function">hasRoles</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token operator">!</span>userStore<span class="token punctuation">.</span>roles <span class="token operator">&amp;&amp;</span> userStore<span class="token punctuation">.</span>roles<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">cacheRole</span><span class="token punctuation">(</span><span class="token punctuation">{</span> context <span class="token punctuation">}</span><span class="token operator">:</span> ConditionParams<span class="token operator">&lt;</span>ContextType<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> userStore<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Everything is <strong>FLAT</strong>, with no more nesting.<br> The TOP-DOWN rule makes it easy for you to know the reason and where to go.<br> Now, when something goes wrong, you can check the console information.<br> (With <code>debugInfo</code> option set to <code>true</code>)</p><p><img src="`+k+'" alt="Console Screenshot"></p>',6),C=s("code",null,"next",-1),I=s("br",null,null,-1),B=s("p",null,"So easy, right?",-1);function S(L,N){const t=o("ExternalLinkIcon"),p=o("RouterLink");return c(),u("div",null,[s("div",d,[h,s("p",null,[n("This package is currently under development."),g,n(" Everything is subject to frequent changes, and it may be incomplete, unstable, or broken."),f,n(" If you have any feedback, please submit it via "),s("a",m,[n("Github Issues"),a(t)]),n(".")])]),w,s("p",null,[n("Vue Router Rule is an addon for "),s("a",b,[n("Vue Router"),a(t)]),n("."),y,n(" For complex router navigation rules (especially those involving authorization and business needs), the guard "),s("a",_,[n("beforeEach"),a(t)]),n(" can become unwieldy, unreadable, and difficult to debug or maintain."),v,n(" This addon provides an alternative way to define rules that are more readable and maintainable.")]),x,s("p",null,[n("For example, consider the following code (modified from "),s("a",R,[n("this"),a(t)]),n(")")]),T,s("p",null,[n("Vue Router Rule also provides a wide range of "),a(p,{to:"/guides/event-bus.html"},{default:l(()=>[n("events")]),_:1}),n(" for listening, which allows you to better track which rule has been accepted and even retrieve the parameter passed into the "),C,n(" function."),I,n(" With these events, you can define custom behaviors and make your application more flexible.")]),B])}const E=e(r,[["render",S],["__file","index.html.vue"]]);export{E as default};
