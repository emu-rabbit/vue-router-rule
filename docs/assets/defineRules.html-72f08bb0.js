import{_ as e,M as o,p,q as c,R as n,t as s,N as i,V as u,a1 as a}from"./framework-5866ffd3.js";const l={},r=a(`<h1 id="define-router-rules" tabindex="-1"><a class="header-anchor" href="#define-router-rules" aria-hidden="true">#</a> Define Router Rules</h1><p>The most important thing is to define where the <code>Router</code> should go under certain circumstances, and we call them <code>RouterRule</code>s.<br> We will use <code>RouterRuleBuilder</code> to create a builder, set its content, and finally generate an instance of <code>RouterRule</code>.</p><p>To use <code>RouterRuleBuilder</code>, you must use the static function <code>RouterRuleBuilder.create</code> to generate a factory function.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> Builder <span class="token operator">=</span> RouterRuleBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>Afterwards, we can call the variable <code>Builder</code> above and pass in the <code>remark</code> parameter.<br> This <code>remark</code> parameter will become <code>RouterRule#remark</code> in the end.<br> Although it is optional, it is strongly recommended to fill it in as it will make debugging and code reading easier later on.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Accept route in white list&#39;</span><span class="token punctuation">)</span>
<span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Deny user without permission&#39;</span><span class="token punctuation">)</span>
<span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Random chance navigate to the rainbow unicorn&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>After creating the builder, we can now proceed to configure the conditions.<br> Currently, there are several condition methods available:</p><ul><li><code>#when</code></li><li><code>#to</code></li><li><code>#from</code></li><li><code>#withContext</code></li><li><code>#any</code></li></ul>`,8),k=n("code",null,"#when",-1),d=n("code",null,"#when",-1),g=n("br",null,null,-1),h=n("code",null,"#to",-1),f=n("code",null,"to",-1),m=n("code",null,"beforeEach",-1),x=n("code",null,"or",-1),_=n("br",null,null,-1),y=n("code",null,"#from",-1),w=n("code",null,"#to",-1),b=n("code",null,"from",-1),v=n("code",null,"beforeEach",-1),R=n("br",null,null,-1),B=n("code",null,"#withContext",-1),q=n("br",null,null,-1),C=n("code",null,"#any",-1),S=a(`<div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// RouterRuleBuilder#to</span>
<span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;On request enter info page&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">&#39;/info&#39;</span><span class="token punctuation">)</span>

<span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Path start with &quot;user&quot;&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/user</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>

<span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;To path length over 10&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>to <span class="token operator">=&gt;</span> to<span class="token punctuation">.</span>path<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>

<span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Using array (&quot;or&quot; condition)&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;/info&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/user</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> to <span class="token operator">=&gt;</span> to<span class="token punctuation">.</span>path<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Using chaining (&quot;and&quot; condition)&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/user</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>to <span class="token operator">=&gt;</span> to<span class="token punctuation">.</span>path<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>

<span class="token comment">// RouterRuleBuilder#from</span>
<span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Same as the #from&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;/dashboard&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// RouterRuleBuilder#any</span>
<span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Match all the navigation&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// RouterRuleBuilder#when</span>
<span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;You can get to, from &amp; context from the parameter&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> context <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>

<span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Can used only for your custom condition&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span><span class="token punctuation">)</span>

<span class="token comment">// Chaining</span>
<span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Chain these together&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">&#39;/dashboard&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
</code></pre></div><p>After defining the conditions, the most important thing is to decide where to go.<br> Currently, there are several methods of directing.</p><ul><li><code>#next</code></li><li><code>#accept</code></li><li><code>#deny</code></li><li><code>#redirect</code></li><li><code>#continue</code></li></ul><p>All directing methods will return a <code>RouterRule</code> instance, which means you cannot chain any methods of <code>RouterRuleBuilder</code>.<br><code>RouterRule</code> is a complete rule definition and can be used by passing it to the <code>defineRule</code> function.</p><p><code>#next</code> is a versatile method. Except for <code>#continue</code>, all directing methods can be converted into equivalent <code>#next</code> methods.<br><code>#next</code> accepts a function that takes <code>EnvironmentContext</code> as input and returns a parameter provided to the <code>next</code> parameter in <code>beforeEach</code>. Simply put, <code>Builder().next(() =&gt; false)</code> is equivalent to calling <code>next(false)</code> in <code>beforeEach</code>.</p><p><code>#accept</code> will accept the directing, which is equivalent to the original <code>next()</code>.<br><code>#deny</code> will reject the directing, which is equivalent to the original <code>next(false)</code>.<br><code>#redirect</code> will redirect navigation.<br><code>#continue</code> will treat this rule as a condition failure and not direct anything, move on and checking the next rule.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// #accept</span>
<span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Accept a navigation&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// #deny</span>
<span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Deny a navigation&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">deny</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// #redirect</span>
<span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Redirect to static location&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>

<span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Redirect to dynamic location&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> from <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/login?redirect=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>from<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>

<span class="token comment">// #continue</span>
<span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Move to next rule&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">continue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// #next</span>
<span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Same to #accept&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>

<span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Same to #deny&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span><span class="token punctuation">)</span>

<span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Can use async&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">api</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>If you want to perform some extra tasks, you can use <code>#do</code>.<br><code>#do</code> is a simple method that performs a task and can be combined with the above condition and directing methods.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;If user has token, save it and accept navigation&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> piniaStore<span class="token punctuation">.</span>token <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">do</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">,</span> piniaStore<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>`,9);function A(E,M){const t=o("RouterLink");return p(),c("div",null,[r,n("p",null,[k,s(" is a versatile condition setting, and other condition methods can be converted into an equivalent "),d,s("."),g,h,s(" is used to check the parameter "),f,s(" related to "),m,s(", and can be passed a string, regular expression, or a function used for checking. It can also be passed an array, where any element in the array will make the condition pass, which is equivalent to "),x,s("."),_,y,s(" is similar to "),w,s(", but is used to check the parameter "),b,s(" of "),v,s("."),R,s(" We will explain "),B,s(" in "),i(t,{to:"/guides/context.html"},{default:u(()=>[s("Context")]),_:1}),s("."),q,C,s(" accepts any condition, which is the same as not writing it. However, it can be written for the sake of code readability.")]),S])}const T=e(l,[["render",A],["__file","defineRules.html.vue"]]);export{T as default};
