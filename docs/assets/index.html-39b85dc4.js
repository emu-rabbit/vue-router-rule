import{_ as p,M as o,p as e,q as c,R as s,t as n,N as t,a1 as u}from"./framework-5866ffd3.js";const l="/vue-router-rule/images/console.png",i={},k={class:"custom-container warning"},r=s("p",{class:"custom-container-title"},"WARNING",-1),d=s("br",null,null,-1),h=s("br",null,null,-1),g={href:"https://github.com/emu-rabbit/vue-router-rule/issues",target:"_blank",rel:"noopener noreferrer"},f=s("h1",{id:"introduction",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),n(" Introduction")],-1),m={href:"https://router.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},w=s("br",null,null,-1),b={href:"https://router.vuejs.org/guide/advanced/navigation-guards.html#global-before-guards",target:"_blank",rel:"noopener noreferrer"},y=s("br",null,null,-1),_=s("h1",{id:"it-changed-what",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#it-changed-what","aria-hidden":"true"},"#"),n(" It changed what?")],-1),v={href:"https://github.com/youlaitech/vue3-element-admin/blob/master/src/permission.ts",target:"_blank",rel:"noopener noreferrer"},x=u(`<div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> whiteList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/auth-redirect&#39;</span><span class="token punctuation">]</span> <span class="token comment">// no redirect whitelist</span>

router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> hasToken <span class="token operator">=</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// determine whether the user has logged in</span>
    <span class="token keyword">const</span> hasRoles <span class="token operator">=</span> userStore<span class="token punctuation">.</span>roles <span class="token operator">&amp;&amp;</span> userStore<span class="token punctuation">.</span>roles<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token comment">// determine whether the user has obtained his permission roles through getInfo</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>hasRoles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">// get user info</span>
                    <span class="token keyword">await</span> userStore<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// remove token and go to login page to re-login</span>
                    <span class="token keyword">await</span> userStore<span class="token punctuation">.</span><span class="token function">resetToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>whiteList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// in the free login whitelist, go directly</span>
            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// other pages that do not have permission to access are redirected to the login page.</span>
            <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Yeah, lot of nested <code>if</code> here.<br> It&#39;s hard to read when the application grows.<br> Comments are scattered everywhere in nested blocks, making it difficult to trace.<br> So, if something goes wrong, you have to add <code>console.log</code> everywhere before you can debug it.</p></div><p>With the use of Vue Router Rule, it now looks like this.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>
    hasToken<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>
    <span class="token function-variable function">hasRoles</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> Builder <span class="token operator">=</span> RouterRuleBuilder<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">create</span><span class="token generic class-name"><span class="token operator">&lt;</span>Context<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">defineRule</span><span class="token punctuation">(</span>
    router<span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;User with token will redirect to root from login page&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">withContext</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>hasToken<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">&#39;hasToken&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Accept user when role already cached&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;hasToken&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">withContext</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token function">hasRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Cache user role&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;hasToken&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">do</span><span class="token punctuation">(</span>cacheRole<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">continue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Accept user on cache success&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;hasToken&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">withContext</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token function">hasRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Logout on cache failed&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;hasToken&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">do</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> userStore<span class="token punctuation">.</span><span class="token function">resetToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Accept user without token but want to whitelist&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">withContext</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> <span class="token operator">!</span>c<span class="token punctuation">.</span>hasToken<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>to <span class="token operator">=&gt;</span> whiteList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">&#39;Redirect user without token to login&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    initialContextProvider
<span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">initialContextProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        hasToken<span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;accessToken&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function-variable function">hasRoles</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token operator">!</span>userStore<span class="token punctuation">.</span>roles <span class="token operator">&amp;&amp;</span> userStore<span class="token punctuation">.</span>roles<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">cacheRole</span><span class="token punctuation">(</span><span class="token punctuation">{</span> context <span class="token punctuation">}</span><span class="token operator">:</span> ConditionParams<span class="token operator">&lt;</span>ContextType<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> userStore<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Everything is <strong>FLAT</strong>, with no more nesting.<br> The TOP-DOWN rule makes it easy for you to know the reason and where to go.<br> Now, when something goes wrong, you can check the console information.</p><p><img src="`+l+'" alt="Console Screenshot"></p><p>So easy to trace what happened, right?</p>',7);function T(R,C){const a=o("ExternalLinkIcon");return e(),c("div",null,[s("div",k,[r,s("p",null,[n("This package is currently under development."),d,n(" Everything is subject to frequent changes, and it may be incomplete, unstable, or broken."),h,n(" If you have any feedback, please submit it via "),s("a",g,[n("Github Issues"),t(a)]),n(".")])]),f,s("p",null,[n("Vue Router Rule is an addon for "),s("a",m,[n("Vue Router"),t(a)]),n("."),w,n(" For complex router navigation rules (especially those involving authorization and business needs), the guard "),s("a",b,[n("beforeEach"),t(a)]),n(" can become unwieldy, unreadable, and difficult to debug or maintain."),y,n(" This addon provides an alternative way to define rules that are more readable and maintainable.")]),_,s("p",null,[n("For example, consider the following code (modified from "),s("a",v,[n("this"),t(a)]),n(")")]),x])}const S=p(i,[["render",T],["__file","index.html.vue"]]);export{S as default};
